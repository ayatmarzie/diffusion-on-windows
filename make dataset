
import json
import random

# Config
input_file = 'data.json'       # your source JSON file
train_file = 'train.jsonl'
valid_file = 'valid.jsonl'
test_file  = 'test.jsonl'

train_ratio = 0.8
valid_ratio = 0.1
test_ratio  = 0.1

# Load the data
with open(input_file, 'r', encoding='utf-8') as f:
    data = json.load(f)

# If data is inside a key like {"data": [...]}, extract it
if isinstance(data, dict):
    data = data.get("data", [])

# Shuffle and split
random.shuffle(data)
total = len(data)
train_end = int(total * train_ratio)
valid_end = train_end + int(total * valid_ratio)

train_data = data[:train_end]
valid_data = data[train_end:valid_end]
test_data  = data[valid_end:]

# Save to .jsonl files
def save_jsonl(filename, items):
    with open(filename, 'w', encoding='utf-8') as f:
        for item in items:
            f.write(json.dumps(item, ensure_ascii=False) + '\n')

save_jsonl(train_file, train_data)
save_jsonl(valid_file, valid_data)
save_jsonl(test_file, test_data)




#How to save json in a {} \n {}... format

# Load standard JSON list
with open('input.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

# Save as compact JSON Lines
with open('output.jsonl', 'w', encoding='utf-8') as f:
    for item in data:
        json.dump(item, f, ensure_ascii=False)
        f.write('\n')



import json

data = []
with open('your_file.json', 'r', encoding='utf-8') as f:
    for line in f:
        data.append(json.loads(line))



from difflib import SequenceMatcher
import json

# Load JSON
with open('your_data.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

# Group by trg, keeping best src based on similarity
from collections import defaultdict

best_entries = {}
scores = defaultdict(float)

for entry in data:
    trg = entry['trg']
    src = entry['src']
    sim = SequenceMatcher(None, src, trg).ratio()

    if sim > scores[trg]:
        scores[trg] = sim
        best_entries[trg] = entry

# Save results
with open('best_data.json', 'w', encoding='utf-8') as f:
    json.dump(list(best_entries.values()), f, ensure_ascii=False, indent=2)
